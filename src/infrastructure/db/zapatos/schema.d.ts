/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2022 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module "zapatos/schema" {
  import type * as db from "zapatos/db";

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary {
    version: 104;
  }

  /* === schema: public === */

  /* --- enums --- */
  /* (none) */

  /* --- tables --- */

  /**
   * **events**
   * - Table in database
   */
  export namespace events {
    export type Table = "events";
    export interface Selectable {
      /**
       * **events.event_id**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      event_id: string;
      /**
       * **events.event_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      event_name: string;
      /**
       * **events.stream_id**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      stream_id: string;
      /**
       * **events.event**
       * - `jsonb` in database
       * - `NOT NULL`, no default
       */
      event: db.JSONValue;
      /**
       * **events.timestamp**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      timestamp: Date;
      /**
       * **events.status**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      status: string;
      /**
       * **events.type**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      type: string;
      /**
       * **events.meta**
       * - `jsonb` in database
       * - Nullable, no default
       */
      meta: db.JSONValue | null;
    }
    export interface JSONSelectable {
      /**
       * **events.event_id**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      event_id: string;
      /**
       * **events.event_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      event_name: string;
      /**
       * **events.stream_id**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      stream_id: string;
      /**
       * **events.event**
       * - `jsonb` in database
       * - `NOT NULL`, no default
       */
      event: db.JSONValue;
      /**
       * **events.timestamp**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      timestamp: db.TimestampTzString;
      /**
       * **events.status**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      status: string;
      /**
       * **events.type**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      type: string;
      /**
       * **events.meta**
       * - `jsonb` in database
       * - Nullable, no default
       */
      meta: db.JSONValue | null;
    }
    export interface Whereable {
      /**
       * **events.event_id**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      event_id?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
       * **events.event_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      event_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
       * **events.stream_id**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      stream_id?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
       * **events.event**
       * - `jsonb` in database
       * - `NOT NULL`, no default
       */
      event?:
        | db.JSONValue
        | db.Parameter<db.JSONValue>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
       * **events.timestamp**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      timestamp?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            (db.TimestampTzString | Date) | db.Parameter<db.TimestampTzString | Date> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **events.status**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      status?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
       * **events.type**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      type?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
       * **events.meta**
       * - `jsonb` in database
       * - Nullable, no default
       */
      meta?:
        | db.JSONValue
        | db.Parameter<db.JSONValue>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
       * **events.event_id**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      event_id: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **events.event_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      event_name: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **events.stream_id**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      stream_id: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **events.event**
       * - `jsonb` in database
       * - `NOT NULL`, no default
       */
      event: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment;
      /**
       * **events.timestamp**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      timestamp: (db.TimestampTzString | Date) | db.Parameter<db.TimestampTzString | Date> | db.SQLFragment;
      /**
       * **events.status**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      status: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **events.type**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      type: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **events.meta**
       * - `jsonb` in database
       * - Nullable, no default
       */
      meta?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **events.event_id**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      event_id?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **events.event_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      event_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **events.stream_id**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      stream_id?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **events.event**
       * - `jsonb` in database
       * - `NOT NULL`, no default
       */
      event?:
        | db.JSONValue
        | db.Parameter<db.JSONValue>
        | db.SQLFragment
        | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment>;
      /**
       * **events.timestamp**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      timestamp?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.SQLFragment<
            any,
            (db.TimestampTzString | Date) | db.Parameter<db.TimestampTzString | Date> | db.SQLFragment
          >;
      /**
       * **events.status**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      status?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **events.type**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      type?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **events.meta**
       * - `jsonb` in database
       * - Nullable, no default
       */
      meta?:
        | db.JSONValue
        | db.Parameter<db.JSONValue>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = "PK_1b77463a4487f09e798dffcb43a";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **scheduled_events**
   * - Table in database
   */
  export namespace scheduled_events {
    export type Table = "scheduled_events";
    export interface Selectable {
      /**
       * **scheduled_events.scheduled_event_id**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      scheduled_event_id: string;
      /**
       * **scheduled_events.execute_at**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      execute_at: Date;
      /**
       * **scheduled_events.event**
       * - `jsonb` in database
       * - `NOT NULL`, no default
       */
      event: db.JSONValue;
      /**
       * **scheduled_events.status**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      status: string;
    }
    export interface JSONSelectable {
      /**
       * **scheduled_events.scheduled_event_id**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      scheduled_event_id: string;
      /**
       * **scheduled_events.execute_at**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      execute_at: db.TimestampTzString;
      /**
       * **scheduled_events.event**
       * - `jsonb` in database
       * - `NOT NULL`, no default
       */
      event: db.JSONValue;
      /**
       * **scheduled_events.status**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      status: string;
    }
    export interface Whereable {
      /**
       * **scheduled_events.scheduled_event_id**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      scheduled_event_id?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
       * **scheduled_events.execute_at**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      execute_at?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            (db.TimestampTzString | Date) | db.Parameter<db.TimestampTzString | Date> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **scheduled_events.event**
       * - `jsonb` in database
       * - `NOT NULL`, no default
       */
      event?:
        | db.JSONValue
        | db.Parameter<db.JSONValue>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
       * **scheduled_events.status**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      status?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
       * **scheduled_events.scheduled_event_id**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      scheduled_event_id: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **scheduled_events.execute_at**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      execute_at: (db.TimestampTzString | Date) | db.Parameter<db.TimestampTzString | Date> | db.SQLFragment;
      /**
       * **scheduled_events.event**
       * - `jsonb` in database
       * - `NOT NULL`, no default
       */
      event: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment;
      /**
       * **scheduled_events.status**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      status: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **scheduled_events.scheduled_event_id**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      scheduled_event_id?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **scheduled_events.execute_at**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      execute_at?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.SQLFragment<
            any,
            (db.TimestampTzString | Date) | db.Parameter<db.TimestampTzString | Date> | db.SQLFragment
          >;
      /**
       * **scheduled_events.event**
       * - `jsonb` in database
       * - `NOT NULL`, no default
       */
      event?:
        | db.JSONValue
        | db.Parameter<db.JSONValue>
        | db.SQLFragment
        | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment>;
      /**
       * **scheduled_events.status**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      status?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = "PK_813829cb15f4a56b3945abfc2b2";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {
    export type Table = events.Table | scheduled_events.Table;
    export type Selectable = events.Selectable | scheduled_events.Selectable;
    export type JSONSelectable = events.JSONSelectable | scheduled_events.JSONSelectable;
    export type Whereable = events.Whereable | scheduled_events.Whereable;
    export type Insertable = events.Insertable | scheduled_events.Insertable;
    export type Updatable = events.Updatable | scheduled_events.Updatable;
    export type UniqueIndex = events.UniqueIndex | scheduled_events.UniqueIndex;
    export type Column = events.Column | scheduled_events.Column;

    export type AllBaseTables = [events.Table, scheduled_events.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [events.Table, scheduled_events.Table];
  }

  /* === global aggregate types === */

  export type Schema = "public";
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ["public"];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];

  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    events: events.Selectable;
    scheduled_events: scheduled_events.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    events: events.JSONSelectable;
    scheduled_events: scheduled_events.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    events: events.Whereable;
    scheduled_events: scheduled_events.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    events: events.Insertable;
    scheduled_events: scheduled_events.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    events: events.Updatable;
    scheduled_events: scheduled_events.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    events: events.UniqueIndex;
    scheduled_events: scheduled_events.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    events: events.Column;
    scheduled_events: scheduled_events.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    events: events.SQL;
    scheduled_events: scheduled_events.SQL;
  }[T];
}
